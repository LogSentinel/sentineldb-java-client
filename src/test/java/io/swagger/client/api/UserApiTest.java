/**
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.User;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Creates a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOST1Test() throws ApiException {
        User user = null;
        String actorId = null;
        // User response = api.createUsingPOST1(user, actorId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUsingDELETE1Test() throws ApiException {
        String userId = null;
        String actorId = null;
        // Object response = api.deleteUsingDELETE1(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Forgets user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forgetUserUsingPUTTest() throws ApiException {
        String userId = null;
        String actorId = null;
        // Object response = api.forgetUserUsingPUT(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets user by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsingGET1Test() throws ApiException {
        String userId = null;
        String actorId = null;
        // User response = api.getUsingGET1(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets concrete user version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionUsingGET1Test() throws ApiException {
        String userId = null;
        Integer version = null;
        String actorId = null;
        // User response = api.getVersionUsingGET1(userId, version, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets all record versions by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionsUsingGET1Test() throws ApiException {
        String userId = null;
        // List<Integer> response = api.getVersionsUsingGET1(userId);

        // TODO: test validations
    }
    
    /**
     * Updates user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUsingPUT1Test() throws ApiException {
        User user = null;
        String actorId = null;
        // User response = api.updateUsingPUT1(user, actorId);

        // TODO: test validations
    }
    
}
