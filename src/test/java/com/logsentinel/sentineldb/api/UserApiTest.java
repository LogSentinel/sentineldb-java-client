/*
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.sentineldb.api;

import com.logsentinel.sentineldb.ApiException;
import java.util.UUID;
import com.logsentinel.sentineldb.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Creates a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UUID datastoreId = null;
        User user = null;
        String actorId = null;
        User response = api.createUser(datastoreId, user, actorId);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        UUID userId = null;
        String actorId = null;
        Object response = api.deleteUser(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Forgets user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forgetUserTest() throws ApiException {
        UUID userId = null;
        String actorId = null;
        Object response = api.forgetUser(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets user by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        UUID userId = null;
        String actorId = null;
        User response = api.getUser(userId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets concrete user version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserVersionTest() throws ApiException {
        UUID userId = null;
        Integer version = null;
        String actorId = null;
        User response = api.getUserVersion(userId, version, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets all record versions by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserVersionsTest() throws ApiException {
        UUID userId = null;
        List<Integer> response = api.getUserVersions(userId);

        // TODO: test validations
    }
    
    /**
     * Updates user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        User user = null;
        UUID userId = null;
        String actorId = null;
        User response = api.updateUser(user, userId, actorId);

        // TODO: test validations
    }
    
}
