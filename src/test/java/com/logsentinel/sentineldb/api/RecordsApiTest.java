/**
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.logsentinel.sentineldb.api;

import com.logsentinel.sentineldb.ApiException;
import com.logsentinel.sentineldb.model.Record;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecordsApi
 */
public class RecordsApiTest {

    private final RecordsApi api = new RecordsApi();

    
    /**
     * Creates a record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRecordTest() throws ApiException {
        String body = null;
        String datastoreId = null;
        String actorId = null;
        String ownerId = null;
        String type = null;
        // Record response = api.createRecord(body, datastoreId, actorId, ownerId, type);

        // TODO: test validations
    }
    
    /**
     * Deletes an existing record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String recordId = null;
        String actorId = null;
        // Object response = api.deleteRecord(recordId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets record by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String recordId = null;
        String actorId = null;
        // Record response = api.getRecord(recordId, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets concrete record version
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordVersionTest() throws ApiException {
        String recordId = null;
        Integer version = null;
        String actorId = null;
        // Record response = api.getRecordVersion(recordId, version, actorId);

        // TODO: test validations
    }
    
    /**
     * Gets all record versions by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecordVersionsTest() throws ApiException {
        String recordId = null;
        // List<Integer> response = api.getRecordVersions(recordId);

        // TODO: test validations
    }
    
    /**
     * Updates record
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRecordTest() throws ApiException {
        Record record = null;
        String actorId = null;
        // Record response = api.updateRecord(record, actorId);

        // TODO: test validations
    }
    
    /**
     * Updates a record&#39;s owner
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRecordOwnerTest() throws ApiException {
        String ownerId = null;
        String recordId = null;
        String actorId = null;
        // Record response = api.updateRecordOwner(ownerId, recordId, actorId);

        // TODO: test validations
    }
    
}
