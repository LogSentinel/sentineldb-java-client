/**
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Record;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordsApi {
    private ApiClient apiClient;

    public RecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createUsingPOST */
    private com.squareup.okhttp.Call createUsingPOSTCall(String body, String datastoreId, String actorId, String ownerId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createUsingPOST(Async)");
        }
        
        // verify the required parameter 'datastoreId' is set
        if (datastoreId == null) {
            throw new ApiException("Missing the required parameter 'datastoreId' when calling createUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/datastore/{datastoreId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "datastoreId" + "\\}", apiClient.escapeString(datastoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));
        if (ownerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "ownerId", ownerId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a record
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record createUsingPOST(String body, String datastoreId, String actorId, String ownerId, String type) throws ApiException {
        ApiResponse<Record> resp = createUsingPOSTWithHttpInfo(body, datastoreId, actorId, ownerId, type);
        return resp.getData();
    }

    /**
     * Creates a record
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> createUsingPOSTWithHttpInfo(String body, String datastoreId, String actorId, String ownerId, String type) throws ApiException {
        com.squareup.okhttp.Call call = createUsingPOSTCall(body, datastoreId, actorId, ownerId, type, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a record (asynchronously)
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsingPOSTAsync(String body, String datastoreId, String actorId, String ownerId, String type, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUsingPOSTCall(body, datastoreId, actorId, ownerId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteUsingDELETE */
    private com.squareup.okhttp.Call deleteUsingDELETECall(String recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling deleteUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/{recordId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes an existing record
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteUsingDELETE(String recordId, String actorId) throws ApiException {
        ApiResponse<Object> resp = deleteUsingDELETEWithHttpInfo(recordId, actorId);
        return resp.getData();
    }

    /**
     * Deletes an existing record
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteUsingDELETEWithHttpInfo(String recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteUsingDELETECall(recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an existing record (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUsingDELETEAsync(String recordId, String actorId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUsingDELETECall(recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUsingGET */
    private com.squareup.okhttp.Call getUsingGETCall(String recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/{recordId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets record by id
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record getUsingGET(String recordId, String actorId) throws ApiException {
        ApiResponse<Record> resp = getUsingGETWithHttpInfo(recordId, actorId);
        return resp.getData();
    }

    /**
     * Gets record by id
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> getUsingGETWithHttpInfo(String recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = getUsingGETCall(recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets record by id (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsingGETAsync(String recordId, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsingGETCall(recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVersionUsingGET */
    private com.squareup.okhttp.Call getVersionUsingGETCall(String recordId, Integer version, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getVersionUsingGET(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getVersionUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/versions/{version}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()))
        .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets concrete record version
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record getVersionUsingGET(String recordId, Integer version, String actorId) throws ApiException {
        ApiResponse<Record> resp = getVersionUsingGETWithHttpInfo(recordId, version, actorId);
        return resp.getData();
    }

    /**
     * Gets concrete record version
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> getVersionUsingGETWithHttpInfo(String recordId, Integer version, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = getVersionUsingGETCall(recordId, version, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets concrete record version (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionUsingGETAsync(String recordId, Integer version, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionUsingGETCall(recordId, version, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getVersionsUsingGET */
    private com.squareup.okhttp.Call getVersionsUsingGETCall(String recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getVersionsUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/versions".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all record versions by id
     * 
     * @param recordId recordId (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> getVersionsUsingGET(String recordId) throws ApiException {
        ApiResponse<List<Integer>> resp = getVersionsUsingGETWithHttpInfo(recordId);
        return resp.getData();
    }

    /**
     * Gets all record versions by id
     * 
     * @param recordId recordId (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> getVersionsUsingGETWithHttpInfo(String recordId) throws ApiException {
        com.squareup.okhttp.Call call = getVersionsUsingGETCall(recordId, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all record versions by id (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVersionsUsingGETAsync(String recordId, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVersionsUsingGETCall(recordId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateOwnerUsingPUT */
    private com.squareup.okhttp.Call updateOwnerUsingPUTCall(String ownerId, String recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling updateOwnerUsingPUT(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling updateOwnerUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/owner/{ownerId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "ownerId" + "\\}", apiClient.escapeString(ownerId.toString()))
        .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates a record&#39;s owner
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record updateOwnerUsingPUT(String ownerId, String recordId, String actorId) throws ApiException {
        ApiResponse<Record> resp = updateOwnerUsingPUTWithHttpInfo(ownerId, recordId, actorId);
        return resp.getData();
    }

    /**
     * Updates a record&#39;s owner
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> updateOwnerUsingPUTWithHttpInfo(String ownerId, String recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = updateOwnerUsingPUTCall(ownerId, recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a record&#39;s owner (asynchronously)
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOwnerUsingPUTAsync(String ownerId, String recordId, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOwnerUsingPUTCall(ownerId, recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateUsingPUT */
    private com.squareup.okhttp.Call updateUsingPUTCall(Record record, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = record;
        
        // verify the required parameter 'record' is set
        if (record == null) {
            throw new ApiException("Missing the required parameter 'record' when calling updateUsingPUT(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/api/record".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*_/_*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates record
     * 
     * @param record record (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record updateUsingPUT(Record record, String actorId) throws ApiException {
        ApiResponse<Record> resp = updateUsingPUTWithHttpInfo(record, actorId);
        return resp.getData();
    }

    /**
     * Updates record
     * 
     * @param record record (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> updateUsingPUTWithHttpInfo(Record record, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = updateUsingPUTCall(record, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates record (asynchronously)
     * 
     * @param record record (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUsingPUTAsync(Record record, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUsingPUTCall(record, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
