/*
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.sentineldb.api;

import com.logsentinel.sentineldb.ApiCallback;
import com.logsentinel.sentineldb.ApiClient;
import com.logsentinel.sentineldb.ApiException;
import com.logsentinel.sentineldb.ApiResponse;
import com.logsentinel.sentineldb.Configuration;
import com.logsentinel.sentineldb.Pair;
import com.logsentinel.sentineldb.ProgressRequestBody;
import com.logsentinel.sentineldb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.logsentinel.sentineldb.model.Datastore;
import com.logsentinel.sentineldb.model.Record;
import java.util.UUID;
import com.logsentinel.sentineldb.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatastoreApi {
    private ApiClient apiClient;

    public DatastoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatastoreApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getRecordsByDatastore
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordsByDatastoreCall(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datastore/{datastoreId}/records"
            .replaceAll("\\{" + "datastoreId" + "\\}", apiClient.escapeString(datastoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actor", actor));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordsByDatastoreValidateBeforeCall(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datastoreId' is set
        if (datastoreId == null) {
            throw new ApiException("Missing the required parameter 'datastoreId' when calling getRecordsByDatastore(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordsByDatastoreCall(datastoreId, actor, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets records by datastore with pagination
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @return List&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Record> getRecordsByDatastore(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<List<Record>> resp = getRecordsByDatastoreWithHttpInfo(datastoreId, actor, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Gets records by datastore with pagination
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Record&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Record>> getRecordsByDatastoreWithHttpInfo(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getRecordsByDatastoreValidateBeforeCall(datastoreId, actor, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets records by datastore with pagination (asynchronously)
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordsByDatastoreAsync(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ApiCallback<List<Record>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordsByDatastoreValidateBeforeCall(datastoreId, actor, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Record>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsersByDatastore
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersByDatastoreCall(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datastore/{datastoreId}/users"
            .replaceAll("\\{" + "datastoreId" + "\\}", apiClient.escapeString(datastoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actor", actor));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersByDatastoreValidateBeforeCall(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'datastoreId' is set
        if (datastoreId == null) {
            throw new ApiException("Missing the required parameter 'datastoreId' when calling getUsersByDatastore(Async)");
        }
        

        com.squareup.okhttp.Call call = getUsersByDatastoreCall(datastoreId, actor, pageNumber, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets users by datastore with pagination
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<User> getUsersByDatastore(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize) throws ApiException {
        ApiResponse<List<User>> resp = getUsersByDatastoreWithHttpInfo(datastoreId, actor, pageNumber, pageSize);
        return resp.getData();
    }

    /**
     * Gets users by datastore with pagination
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<User>> getUsersByDatastoreWithHttpInfo(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = getUsersByDatastoreValidateBeforeCall(datastoreId, actor, pageNumber, pageSize, null, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets users by datastore with pagination (asynchronously)
     * 
     * @param datastoreId datastoreId (required)
     * @param actor actor (optional)
     * @param pageNumber pageNumber (optional, default to 0)
     * @param pageSize pageSize (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersByDatastoreAsync(UUID datastoreId, String actor, Integer pageNumber, Integer pageSize, final ApiCallback<List<User>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersByDatastoreValidateBeforeCall(datastoreId, actor, pageNumber, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDatastores
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDatastoresCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/datastore/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDatastoresValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listDatastoresCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of datastores
     * 
     * @return List&lt;Datastore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Datastore> listDatastores() throws ApiException {
        ApiResponse<List<Datastore>> resp = listDatastoresWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of datastores
     * 
     * @return ApiResponse&lt;List&lt;Datastore&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Datastore>> listDatastoresWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = listDatastoresValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<Datastore>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of datastores (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDatastoresAsync(final ApiCallback<List<Datastore>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDatastoresValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Datastore>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
