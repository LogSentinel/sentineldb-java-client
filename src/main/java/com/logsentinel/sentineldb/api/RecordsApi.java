/*
 * SentinelDB RESTful API
 * Read more at https://sentineldb.logsentinel.com/documentation/
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.sentineldb.api;

import com.logsentinel.sentineldb.ApiCallback;
import com.logsentinel.sentineldb.ApiClient;
import com.logsentinel.sentineldb.ApiException;
import com.logsentinel.sentineldb.ApiResponse;
import com.logsentinel.sentineldb.Configuration;
import com.logsentinel.sentineldb.Pair;
import com.logsentinel.sentineldb.ProgressRequestBody;
import com.logsentinel.sentineldb.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.logsentinel.sentineldb.model.Record;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordsApi {
    private ApiClient apiClient;

    public RecordsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createRecord
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRecordCall(String body, UUID datastoreId, String actorId, UUID ownerId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/record/datastore/{datastoreId}"
            .replaceAll("\\{" + "datastoreId" + "\\}", apiClient.escapeString(datastoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));
        if (ownerId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ownerId", ownerId));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRecordValidateBeforeCall(String body, UUID datastoreId, String actorId, UUID ownerId, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRecord(Async)");
        }
        
        // verify the required parameter 'datastoreId' is set
        if (datastoreId == null) {
            throw new ApiException("Missing the required parameter 'datastoreId' when calling createRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = createRecordCall(body, datastoreId, actorId, ownerId, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a record
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record createRecord(String body, UUID datastoreId, String actorId, UUID ownerId, String type) throws ApiException {
        ApiResponse<Record> resp = createRecordWithHttpInfo(body, datastoreId, actorId, ownerId, type);
        return resp.getData();
    }

    /**
     * Creates a record
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> createRecordWithHttpInfo(String body, UUID datastoreId, String actorId, UUID ownerId, String type) throws ApiException {
        com.squareup.okhttp.Call call = createRecordValidateBeforeCall(body, datastoreId, actorId, ownerId, type, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a record (asynchronously)
     * 
     * @param body body (required)
     * @param datastoreId datastoreId (required)
     * @param actorId actorId (optional)
     * @param ownerId ownerId (optional)
     * @param type type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRecordAsync(String body, UUID datastoreId, String actorId, UUID ownerId, String type, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRecordValidateBeforeCall(body, datastoreId, actorId, ownerId, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRecord
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRecordCall(UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRecordValidateBeforeCall(UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling deleteRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteRecordCall(recordId, actorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes an existing record
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteRecord(UUID recordId, String actorId) throws ApiException {
        ApiResponse<Object> resp = deleteRecordWithHttpInfo(recordId, actorId);
        return resp.getData();
    }

    /**
     * Deletes an existing record
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteRecordWithHttpInfo(UUID recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes an existing record (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRecordAsync(UUID recordId, String actorId, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRecordValidateBeforeCall(recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecord
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordCall(UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordValidateBeforeCall(UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordCall(recordId, actorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets record by id
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record getRecord(UUID recordId, String actorId) throws ApiException {
        ApiResponse<Record> resp = getRecordWithHttpInfo(recordId, actorId);
        return resp.getData();
    }

    /**
     * Gets record by id
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> getRecordWithHttpInfo(UUID recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = getRecordValidateBeforeCall(recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets record by id (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordAsync(UUID recordId, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordValidateBeforeCall(recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecordVersion
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionCall(UUID recordId, Integer version, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/versions/{version}"
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordVersionValidateBeforeCall(UUID recordId, Integer version, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getRecordVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getRecordVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordVersionCall(recordId, version, actorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets concrete record version
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record getRecordVersion(UUID recordId, Integer version, String actorId) throws ApiException {
        ApiResponse<Record> resp = getRecordVersionWithHttpInfo(recordId, version, actorId);
        return resp.getData();
    }

    /**
     * Gets concrete record version
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> getRecordVersionWithHttpInfo(UUID recordId, Integer version, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = getRecordVersionValidateBeforeCall(recordId, version, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets concrete record version (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param version version (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionAsync(UUID recordId, Integer version, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordVersionValidateBeforeCall(recordId, version, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecordVersions
     * @param recordId recordId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionsCall(UUID recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/versions"
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecordVersionsValidateBeforeCall(UUID recordId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling getRecordVersions(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecordVersionsCall(recordId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all record versions by id
     * 
     * @param recordId recordId (required)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> getRecordVersions(UUID recordId) throws ApiException {
        ApiResponse<List<Integer>> resp = getRecordVersionsWithHttpInfo(recordId);
        return resp.getData();
    }

    /**
     * Gets all record versions by id
     * 
     * @param recordId recordId (required)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> getRecordVersionsWithHttpInfo(UUID recordId) throws ApiException {
        com.squareup.okhttp.Call call = getRecordVersionsValidateBeforeCall(recordId, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all record versions by id (asynchronously)
     * 
     * @param recordId recordId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecordVersionsAsync(UUID recordId, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecordVersionsValidateBeforeCall(recordId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRecord
     * @param record record (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRecordCall(Record record, UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = record;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRecordValidateBeforeCall(Record record, UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'record' is set
        if (record == null) {
            throw new ApiException("Missing the required parameter 'record' when calling updateRecord(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling updateRecord(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRecordCall(record, recordId, actorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates record
     * 
     * @param record record (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record updateRecord(Record record, UUID recordId, String actorId) throws ApiException {
        ApiResponse<Record> resp = updateRecordWithHttpInfo(record, recordId, actorId);
        return resp.getData();
    }

    /**
     * Updates record
     * 
     * @param record record (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> updateRecordWithHttpInfo(Record record, UUID recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = updateRecordValidateBeforeCall(record, recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates record (asynchronously)
     * 
     * @param record record (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRecordAsync(Record record, UUID recordId, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRecordValidateBeforeCall(record, recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRecordOwner
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRecordOwnerCall(UUID ownerId, UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/record/{recordId}/owner/{ownerId}"
            .replaceAll("\\{" + "ownerId" + "\\}", apiClient.escapeString(ownerId.toString()))
            .replaceAll("\\{" + "recordId" + "\\}", apiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (actorId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("actorId", actorId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/xml", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRecordOwnerValidateBeforeCall(UUID ownerId, UUID recordId, String actorId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ownerId' is set
        if (ownerId == null) {
            throw new ApiException("Missing the required parameter 'ownerId' when calling updateRecordOwner(Async)");
        }
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling updateRecordOwner(Async)");
        }
        

        com.squareup.okhttp.Call call = updateRecordOwnerCall(ownerId, recordId, actorId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a record&#39;s owner
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return Record
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Record updateRecordOwner(UUID ownerId, UUID recordId, String actorId) throws ApiException {
        ApiResponse<Record> resp = updateRecordOwnerWithHttpInfo(ownerId, recordId, actorId);
        return resp.getData();
    }

    /**
     * Updates a record&#39;s owner
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @return ApiResponse&lt;Record&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Record> updateRecordOwnerWithHttpInfo(UUID ownerId, UUID recordId, String actorId) throws ApiException {
        com.squareup.okhttp.Call call = updateRecordOwnerValidateBeforeCall(ownerId, recordId, actorId, null, null);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a record&#39;s owner (asynchronously)
     * 
     * @param ownerId ownerId (required)
     * @param recordId recordId (required)
     * @param actorId actorId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRecordOwnerAsync(UUID ownerId, UUID recordId, String actorId, final ApiCallback<Record> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRecordOwnerValidateBeforeCall(ownerId, recordId, actorId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Record>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
